# -*- coding: utf-8 -*-
"""DOG VS CAT IMAGE CLASSIFICATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BT0BTMpBrvVFFcUSSJg2k4tMeeyZFSEO

# **DOG VS CAT IMAGE CLASSIFICATION**

---

*Dog vs. cat image classification in Python contains a deep learning model for classifying dog and cat images using a pre-trained MobileNetV2 model. The project includes data preprocessing, image resizing, model training, and a predictive system to identify whether an image is a dog or a cat.*
"""

# installing the Kaggle library
!pip install kaggle

# configuring the path of Kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""# **importing the dataset**"""

# Kaggle api
!kaggle competitions download -c dogs-vs-cats

!ls

# extracting the compressed dataset
from zipfile import ZipFile

dataset = '/content/dogs-vs-cats.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

# extracting the compressed dataset
from zipfile import ZipFile

dataset = '/content/train.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

import os
# counting the number of files in train folder
path, dirs, files = next(os.walk('/content/train'))
file_count = len(files)
print('Number of images: ', file_count)

file_names = os.listdir('/content/train/')
print(file_names)

""" **importing the libraries**"""

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow

"""import numpy as np: Used for numerical operations on arrays, which are essential for handling image data.

from PIL import Image: Allows for opening, manipulating, and saving image files in various formats.

import matplotlib.pyplot as plt: Provides tools for plotting and visualizing data, including images.

import matplotlib.image as mpimg: Used to read images into arrays for processing and visualization.

from sklearn.model_selection import train_test_split: Facilitates splitting the dataset into training and testing sets to evaluate the performance of a model.

from google.colab.patches import cv2_imshow: Allows displaying images in Google Colab using OpenCV, which is not natively supported.
"""

# display dog image
img = mpimg.imread('/content/train/dog.7711.jpg')
imgplt = plt.imshow(img)
plt.show()

# display cat image
img = mpimg.imread('/content/train/cat.1275.jpg')
imgplt = plt.imshow(img)
plt.show()

file_names = os.listdir('/content/train/')

for i in range(5):

  name = file_names[i]
  print(name[0:3])

"""The code lists the filenames in the '/content/train/' directory, then iterates through the first five filenames, printing the first three characters of each."""

file_names = os.listdir('/content/train/')

dog_count = 0
cat_count = 0

for img_file in file_names:

  name = img_file[0:3]

  if name == 'dog':
    dog_count += 1

  else:
    cat_count += 1

print('Number of dog images =', dog_count)
print('Number of cat images =', cat_count)

"""The code counts the number of dog and cat images in the '/content/train/' directory by checking if the first three characters of each filename are 'dog' or not, and then prints the respective counts.

Resizing all the images
"""

#creating a directory for resized images
os.mkdir('/content/image resized')

original_folder = '/content/train/'
resized_folder = '/content/image resized/'

for i in range(2000):

  filename = os.listdir(original_folder)[i]
  img_path = original_folder+filename

  img = Image.open(img_path)
  img = img.resize((224, 224))
  img = img.convert('RGB')

  newImgPath = resized_folder+filename
  img.save(newImgPath)

"""This code resizes the first 2000 images in the '/content/train/' directory to 224x224 pixels, converts them to RGB format, and saves the resized images to the '/content/image resized/' directory with the same filenames."""

# display resized dog image
img = mpimg.imread('/content/image resized/dog.10153.jpg')
imgplt = plt.imshow(img)
plt.show()

# display resized cat image
img = mpimg.imread('/content/image resized/cat.8606.jpg')
imgplt = plt.imshow(img)
plt.show()

""" **Creating labels for resized images of dogs and cats**

Cat --> 0

Dog --> 1
"""

# creaing a for loop to assign labels
filenames = os.listdir('/content/image resized/')


labels = []

for i in range(2000):

  file_name = filenames[i]
  label = file_name[0:3]

  if label == 'dog':
    labels.append(1)

  else:
    labels.append(0)

print(filenames[0:5])
print(len(filenames))

print(labels[0:5])
print(len(labels))

# counting the images of dogs and cats out of 2000 images
values, counts = np.unique(labels, return_counts=True)
print(values)
print(counts)

"""Converting all the resized images to numpy arrays"""

import cv2
import glob

image_directory = '/content/image resized/'
image_extension = ['png', 'jpg']

files = []

[files.extend(glob.glob(image_directory + '*.' + e)) for e in image_extension]

dog_cat_images = np.asarray([cv2.imread(file) for file in files])

print(dog_cat_images)

type(dog_cat_images)

print(dog_cat_images.shape)

X = dog_cat_images
Y = np.asarray(labels)

"""**Train Test Split**"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""1600 --> training images

400 --> test images
"""

# scaling the data
X_train_scaled = X_train/255

X_test_scaled = X_test/255

print(X_train_scaled)

"""Building the Neural Network"""

import tensorflow as tf
import tensorflow_hub as hub

mobilenet_model = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4'

pretrained_model = hub.KerasLayer(mobilenet_model, input_shape=(224,224,3), trainable=False)

num_of_classes = 2

model = tf.keras.Sequential([

    pretrained_model,
    tf.keras.layers.Dense(num_of_classes)

])

model.summary()

model.compile(
    optimizer = 'adam',
    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics = ['acc']
)

model.fit(X_train_scaled, Y_train, epochs=5)

score, acc = model.evaluate(X_test_scaled, Y_test)
print('Test Loss =', score)
print('Test Accuracy =', acc)

"""**Predictive System**"""

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resize = cv2.resize(input_image, (224,224))

input_image_scaled = input_image_resize/255

image_reshaped = np.reshape(input_image_scaled, [1,224,224,3])

input_prediction = model.predict(image_reshaped)

print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 0:
  print('The image represents a Cat')

else:
  print('The image represents a Dog')

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resize = cv2.resize(input_image, (224,224))

input_image_scaled = input_image_resize/255

image_reshaped = np.reshape(input_image_scaled, [1,224,224,3])

input_prediction = model.predict(image_reshaped)

print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 0:
  print('The image represents a Cat')

else:
  print('The image represents a Dog')